Comandos Git

GIT HELP
- Se você precisar de ajuda ao usar Git, existem três maneiras de obter a ajuda para qualquer um dos comandos Git:

git help {comando}
git {comando} --help
man git- {comando}

|-------------------------------------------------------------------------------------------------------------------|
CRIANDO PROJETO
- Caso você esteja iniciando o monitoramento de um projeto existente com Git, você precisa ir para o diretório do
 projeto e digitar

 git init

 |------------------------------------------------------------------------------------------------------------------|
 HISTORICO DE COMMITS
  - Depois que você tiver criado vários commits, ou se clonou um repositório com um histórico de commits existente,
  você provavelmente vai querer ver o que aconteceu. A ferramente mais básica e poderosa para fazer isso é o comando:

git log

Inspeção e Comparação   
git show
git log
git diff
git shortlog - lista a descrição das mensagens dos commits
git describe

 |------------------------------------------------------------------------------------------------------------------|
MUDANDO A BRANCH
- Com o git checkout você pode mudar de branch, caso a branch ainda não exista você poderá passar o parâmetro -b para
 criar.

 git checkout -b {nome_da_branch}

|------------------------------------------------------------------------------------------------------------------|
GITIGNORE
Arquivo criado .gitigone na raiz do projeto para não enviar os arquivos para github, listar Pastas e aquivos para
não ser commitado no servidor

.gitignore

|------------------------------------------------------------------------------------------------------------------|
GIT RESET
- Sincroniza com o ultimo commit da branch no servidor

git reset --hard origin/main 

|------------------------------------------------------------------------------------------------------------------|
CHECKOUT  
- Busca a ultma versão do aquivo no repositório

git checkout nome_aquivo.extenção

|------------------------------------------------------------------------------------------------------------------|
                     COMANDOS GIT

                         |
                         |
                         |
                 git init (Inicializa um repositório)
                         |
                         |
                         |
                git add (Adiciona arquivos ao índice)
                         |
                         |
                         |
           git commit -m "mensagem" (Confirma alterações com uma mensagem)
                         |
                         |
                         |
                git status (Verifica o status do repositório)
               /      |     \
              /       |      \
             /        |       \
  git log (Mostra o histórico de commits)   git diff (Mostra as diferenças entre arquivos)
                         |
                         |
                         |
        git checkout -b nome_da_branch (Cria e muda para uma nova branch)
                         |
                         |
                         |
       git merge branch_origem (Mescla uma branch com a branch atual)
                         |
                         |
                         |
     git push origin nome_da_branch (Envia commits para um repositório remoto)
               /       |       \
              /        |        \
             /         |         \
    git pull (Atualiza o repositório local com as alterações do remoto)
           

|------------------------------------------------------------------------------------------------------------------|

                     COMANDOS GIT

                         |
                         |
                         |
                 git init (Inicializa um repositório)
                         |
                         |
                         |
                git add (Adiciona arquivos ao índice)
                         |
                         |
                         |
           git commit -m "mensagem" (Confirma alterações com uma mensagem)
                         |
                         |
                         |
                git status (Verifica o status do repositório)
               /      |     \
              /       |      \
             /        |       \
  git log (Mostra o histórico de commits)   git diff (Mostra as diferenças entre arquivos)
                         |
                         |
                         |
        git checkout -b nome_da_branch (Cria e muda para uma nova branch)
                         |
                         |
                         |
       git merge branch_origem (Mescla uma branch com a branch atual)
                         |
                         |
                         |
     git push origin nome_da_branch (Envia commits para um repositório remoto)
               /       |       \
              /        |        \
             /         |         \
    git pull (Atualiza o repositório local com as alterações do remoto)
                         |
                         |
                         |
     git reset --hard HEAD~N (Desfaz os últimos N commits)
                         |
                         |
                         |
       git rebase branch (Reorganiza o histórico de commits)
                         |
                         |
                         |
git stash (Armazena temporariamente as mudanças em um diretório de trabalho)
|------------------------------------------------------------------------------------------------------------------|

 MAPA MIND ISSUE

Issues no GitHub
│
├── Definição
│   └── Registro de tarefas, bugs e solicitações de melhoria no projeto.
│
├── Uso
│   └── Rastreamento de problemas e solicitações, comunicação entre colaboradores.
│
├── Comandos
│   ├── create
│   │   └── Cria uma nova issue.
│   │       Exemplo: git issue create "Corrigir bug na página de login"
│   ├── list
│   │   └── Lista todas as issues.
│   │       Exemplo: git issue list
│   ├── close
│   │   └── Fecha uma issue existente.
│   │       Exemplo: git issue close 1
│   ├── comment
│   │   └── Adiciona um comentário a uma issue.
│   │       Exemplo: git issue comment 1 "Testando a solução"
│   ├── assign
│   │   └── Atribui a issue a um usuário.
│   │       Exemplo: git issue assign 1 @usuario
│   └── label
│       └── Adiciona uma label à issue.
│           Exemplo: git issue label 1 "bug"
│
└── Exemplo Prático
    ├── git issue create "Corrigir bug na página de login"
    ├── git issue assign 1 @usuario
    ├── git issue label 1 "bug"
    ├── git issue comment 1 "Testando a solução"
    └── git issue close 1


|------------------------------------------------------------------------------------------------------------------|
MAPA BRANCH

Branches no Git
  |
  |-- Definição
  |     |
  |     |-- Linha independente de desenvolvimento
  |     |-- Permite trabalhar em novas funcionalidades sem alterar o código principal
  |
  |-- Uso
  |     |
  |     |-- Desenvolvimento paralelo
  |     |-- Experimentação de novas ideias
  |     |-- Correção de bugs
  |
  |-- Operações
  |     |
  |     |-- Criar branch: git branch <nome_branch>
  |     |-- Mudar de branch: git checkout <nome_branch>
  |     |-- Criar e mudar para novo branch: git checkout -b <nome_branch>
  |     |-- Listar branches: git branch
  |     |-- Mesclar branches: git merge <nome_branch>
  |     |-- Apagar branch: git branch -d <nome_branch>
  |
  |-- Fluxo de Trabalho
        |
        |-- Criar branch a partir do branch principal: git checkout -b <novo_branch> <branch_base>
        |-- Implementar alterações no novo branch
        |-- Mesclar alterações de volta ao branch principal: git checkout <branch_principal> && git merge <novo_branch>

|------------------------------------------------------------------------------------------------------------------|

Git Stash
│
├── Explicação
│   └── Comando para salvar temporariamente mudanças locais.
│
├── Subcomandos
│   ├── git stash save "mensagem"
│   │   └── Salva as mudanças atuais com uma mensagem descritiva.
│   │       Exemplo: git stash save "Corrigindo bug na página de login"
│   ├── git stash list
│   │   └── Lista todas as stashes salvas.
│   │       Exemplo: git stash list
│   ├── git stash apply stash@{n}
│   │   └── Aplica as mudanças de uma stash específica.
│   │       Exemplo: git stash apply stash@{0}
│   ├── git stash pop
│   │   └── Aplica e remove a última stash da pilha.
│   │       Exemplo: git stash pop
│   └── git stash drop stash@{n}
│       └── Remove uma stash específica da pilha.
│           Exemplo: git stash drop stash@{0}
│
└── Exemplo Prático
    ├── git stash save "Corrigindo bug na página de login"
    ├── git stash list
    ├── git stash apply stash@{0}
    └── git stash drop stash@{0}


|------------------------------------------------------------------------------------------------------------------|

